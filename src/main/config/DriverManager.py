import requests
from selenium import webdriver
import os

from src.main.config.DriverType import DriverType
from src.main.config.FileReaderManager import FileReaderManager
from src.main.config.EnvironmentType import EnvironmentType
from src.main.config.Options_config import OptionsConfiguration

class DriverManager:
    options = OptionsConfiguration()

    # Kh·ªüi t·∫°o bi·∫øn driver_type v√† environment_type
    def __init__(self):
        self.driver_type = FileReaderManager.getInstance().get_config_reader().getBrowser()
        self.environment_type = FileReaderManager.getInstance().get_config_reader().getEnvironment()

    # L·∫•y th√¥ng tin browser
    def webdriver_options(self):
        if self.driver_type == DriverType.CHROME:
            return self.options.chrome_options()
        elif self.driver_type == DriverType.FIREFOX:
            return self.options.firefox_options()
        elif self.driver_type == DriverType.EDGE:
            return self.options.edge_options()
        elif self.driver_type == DriverType.SAFARI:
            return self.options.safari_options()

    def is_grid_available(self, host):
        try:
            url = f"http://{host}:4444/status"
            response = requests.get(url, timeout=3)

            if response.status_code != 200:
                return False

            data = response.json()
            if 'value' in data and 'ready' in data['value']:
                return data['value']['ready']
            else:
                return False

        except Exception as e:
            return False

    # K·∫øt n·ªëi t·ªõi Selenium Grid
    def connect_to_grid(self):
        # K·∫øt n·ªëi t·ªõi Selenium Grid
        hub_host = os.getenv("HUB_HOST", "localhost")
        grid_url = f"http://{hub_host}:4444/wd/hub"

        if not self.is_grid_available(hub_host):
            return None

        return grid_url

    # T·∫°o driver cho docker
    def create_docker_driver(self):
        if self.connect_to_grid() is None:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Selenium Grid t·∫°i http://localhost:4444")
            print("üëâ Vui l√≤ng ki·ªÉm tra Docker container selenium-hub ƒë√£ ch·∫°y ch∆∞a.")
            print("...... S·ª≠ d·ª•ng local ƒë·ªÉ ti·∫øp t·ª•c test! ......")

            return self.create_local_driver()
        else:
            print(f"ƒêang k·∫øt n·ªëi t·ªõi Selenium Grid t·∫°i {self.connect_to_grid()}...")
            self.driver = webdriver.Remote(
                command_executor = self.connect_to_grid(),
                options= self.webdriver_options()
            )
            print("‚úÖ Selenium Grid ƒë√£ s·∫µn s√†ng!")
            return self.driver

    # T·∫°o driver cho local
    def create_local_driver(self):
        if self.driver_type == DriverType.CHROME:
            self.driver = webdriver.Chrome()
        elif self.driver_type == DriverType.FIREFOX:
            self.driver = webdriver.Firefox()
        elif self.driver_type == DriverType.EDGE:
            self.driver = webdriver.Edge()
        elif self.driver_type == DriverType.SAFARI:
            self.driver = webdriver.Safari()

        return self.driver

    # T·∫°o driver cho docker ho·∫∑c local
    def create_driver(self):
        global driver
        if self.environment_type == EnvironmentType.LOCAL:
            self.driver = self.create_local_driver()
        elif self.environment_type == EnvironmentType.DOCKER:
            self.driver = self.create_docker_driver()
        else:
            raise Exception("Kh√¥ng t√¨m th·∫•y m√¥i tr∆∞·ªùng!")

        return self.driver

    def get_driver(self):
        self.driver = self.create_driver()
        self.driver.maximize_window()

        return self.driver

    # ƒê√≥ng driver
    def quit_driver(self):
        print("ƒêang ƒë√≥ng tr√¨nh duy·ªát...")
        self.driver.quit()